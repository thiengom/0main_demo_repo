const cds = require('../../cds')
const LOG = cds.log()
const { parentPort, workerData } = require('worker_threads')
const { WorkerSELECT, WorkerINSERT, WorkerUPSERT, WorkerUPDATE, WorkerDELETE } = require('./workerQuery')
const WorkerReq = require('./WorkerReq')
const { timeout } = require('./config')

parentPort.once('message', function onWorkerMessageReceived(message) {
  const { contextId, workerId, kind, code, reqData } = message
  if (LOG._debug) LOG.debug(`Post message received on worker thread (worker.js) from main thread`, message)
  if (kind !== 'start' || workerId !== workerData.id) return

  // eslint-disable-next-line cds/no-missing-dependencies
  const { VM } = require('vm2')
  const workerReq = new WorkerReq(contextId, reqData)
  const vm = new VM({
    console: 'inherit',
    timeout, // specifies the number of milliseconds to execute code before terminating execution
    allowAsync: true,

    // the sandbox represents the global object inside the vm instance
    sandbox: {
      req: workerReq,
      SELECT: WorkerSELECT._api(),
      INSERT: WorkerINSERT._api(),
      UPSERT: WorkerUPSERT._api(),
      UPDATE: WorkerUPDATE._api(),
      DELETE: WorkerDELETE._api()
    }
  })

  try {
    ;(async function () {
      const result = await vm.run(code)
      parentPort.postMessage({ contextId, kind: 'success', req: reqData, postMessages: workerReq.postMessages, result })
    })()
  } catch (error) {
    parentPort.postMessage({ contextId, kind: 'error', error })
  }
})
